import os
from User_local import *
from graffic_key import *

def find_user(login, users_list):
    marker = False
    for i in users_list:
        if i.name == login:
            marker = True
            return i
        
    if marker == False:
        print("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –ª–æ–≥–∏–Ω–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return marker
    
def generate_random_key(name):
    VALID_MOVES = {
        0: {1, 3, 4, 5, 7}, 
        1: {0, 2, 3, 4, 5, 6, 8}, 
        2: {1, 3, 4, 5, 7}, 
        3: {0, 1, 2, 4, 6, 7, 8}, 
        4: {0, 1, 2, 3, 5, 6, 7, 8}, 
        5: {0, 1, 2, 4, 6, 7, 8}, 
        6: {1, 3, 4, 5, 7}, 
        7: {0, 2, 3, 4, 5, 6, 8}, 
        8: {1, 3, 4, 5, 7}
    }
    key_length = random.randint(4, 7)  # –î–ª–∏–Ω–∞ –∫–ª—é—á–∞
    key_sequence = [random.randint(0, 8)]  # –ù–∞—á–∏–Ω–∞–µ–º —Å —Å–ª—É—á–∞–π–Ω–æ–π —Ç–æ—á–∫–∏

    while len(key_sequence) < key_length:
        last = key_sequence[-1]
        possible_moves = list(VALID_MOVES[last])  # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ—á–µ–∫
        random.shuffle(possible_moves)

        for next_point in possible_moves:
            if next_point != key_sequence[-1]:  # –ó–∞–ø—Ä–µ—â–∞–µ–º –ø–æ–≤—Ç–æ—Ä –ø–æ–¥—Ä—è–¥
                key_sequence.append(next_point)
                break
    f = open("keys.txt", "a")
    f.write(name + ": " + "".join(map(str, key_sequence)) + "\n")
    return key_sequence

def int_inputer(text: str, high_bound: int):
    while True:
        answer = input(text)
        try:
            answer = int(answer)
        except (ValueError):
            print("–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏")
        else:
            if answer > 0 and answer <= high_bound:
                return answer
            else:
                print("–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏. –î–æ–ø—É—Å—Ç–∏–º –≤–≤–æ–¥ —Ç–æ–ª—å–∫–æ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª.")



class Task():
    def __init__(self, path = "files/"):
        f = open("keys.txt", 'w')
        f.close()
        self.user_names_examples = ["Ivan", "Boris", "Maxeeb", "Skibidi", "Lol"]
        self.path = path
        self.users_count = int_inputer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª-–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π > ", len(self.user_names_examples))
        self.files_count = int_inputer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª-–≤–æ —Ñ–∞–π–ª–æ–≤ > ", 20)
        self.users_list = [User(self.path, self.user_names_examples[i], generate_random_key(self.user_names_examples[i])) for i in range(0, self.users_count)]
        self.files_list = [File_binder(self.path, i) for i in range(1, self.files_count + 1)]

    # üìå –§—É–Ω–∫—Ü–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    def register_new_user(self):
        username = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ").strip()
        
        print(f"{username}, –Ω–∞—Ä–∏—Å—É–π—Ç–µ –≤–∞—à –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∫–ª—é—á.")
        root = tk.Tk()
        app = GraphicalKeyApp(root, mode="register")
        root.mainloop()

        if app.result:
            key_sequence = app.result  
            with open("keys.txt", "a") as f:
                f.write(f"{username}: {''.join(map(str, key_sequence))}\n")
            print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!")
            return User(self.path, username, key_sequence)
        else:
            print("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")

    def print_info(self):
        print("–£—Ä–æ–≤–Ω–∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –æ–±—ä–µ–∫—Ç–æ–≤ (–û):")
        for i in self.files_list:
            i.print_mandat_access()
        print("\n –£—Ä–æ–≤–Ω–∏ –¥–æ–ø—É—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (S):")
        for i in self.users_list:
            i.print_mandat_access()

    def check_user_password(self, correct_key_sequence):
        while True:
            root = tk.Tk()
            app = GraphicalKeyApp(root, correct_key_sequence)
            root.mainloop()
            if app.result is not None:
                return app.result

    def main(self):
        marker = True
        while marker:
            self.print_info()
            a = input('–í–≤–µ–¥–∏—Ç–µ "sign up" –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å> ')
            if a == "sign up":
                self.users_list.append(self.register_new_user())
            else:
                login = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ")
                user = find_user(login, self.users_list)
                if user != False:
                    if self.check_user_password(user.key):
                        print("–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É.")
                        print("–ü–µ—Ä–µ—á–µ–Ω—å –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤: " + ", ".join([x.name for x in self.files_list if x.access_right <= user.mandate_rights]))
                        while True:
                            a = input("–ñ–¥—É –≤–∞—à–∏—Ö —É–∫–∞–∑–∞–Ω–∏–π > ")
                            if a == "request":
                                file_number = int_inputer("–ö –∫–∞–∫–æ–º—É —Ñ–∞–π–ª—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Å—É—â–µ—Å—Ç–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø? > ", self.files_count)
                                user.requestfile(self.files_list[file_number - 1])
                            elif a == "read":
                                file_number = int_inputer("–ö–∞–∫–æ–π —Ñ–∞–π–ª –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ—á–∏—Ç–∞—Ç—å? > ", self.files_count)
                                self.files_list[file_number - 1].read_file(user)
                            elif a == "write":
                                file_number = int_inputer("–í –∫–∞–∫–æ–π —Ñ–∞–π–ª –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–ø–∏—Å–∞—Ç—å –¥–∞–Ω–Ω—ã–µ? > ", self.files_count)
                                self.files_list[file_number - 1].write_to_file(user)
                            elif a == "quit":
                                print(f"–†–∞–±–æ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.name} –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –î–æ —Å–≤–∏–¥–∞–Ω–∏—è")
                                break
                            elif a == "exit":
                                print("–£–∏–∞ –ø–æ–∫–∞")
                                return
                            else:
                                print("–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞")
                    else:
                        continue

if __name__ == "__main__":
    task = Task()
    task.main()
